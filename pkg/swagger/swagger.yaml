swagger: "2.0"

basePath: /v1

info:
  description: filer gateway APIs
  title: filer-gateway
  version: 0.1.0

securityDefinitions:
  basicAuth:
    type: basic

  apiKeyHeader:
    type: apiKey
    in: header
    name: X-API-Key

  oauth2:
    type: oauth2
    flow: application
    tokenUrl: 'https://auth-dev.dccn.nl/connect/token'
    scopes:
      filer-gateway: general access scope for filer-gateway APIs

# API paths
paths:

  /ping:
    get:
      summary: endpoint for API server health check.
      security:
        - oauth2: [filer-gateway]
        - basicAuth: []
          apiKeyHeader: []
      consumes:
        - application/json
      produces:
        - application/json
      responses:
        200:
          description: success
          schema:
            type: string
            enum: [pong]
        500:
          description: failure
          schema:
            $ref: '#/definitions/responseBody500'
          description: failure

  /users:
    post:
      summary: provision filer resource for a new user.

      security:
        - oauth2: [filer-gateway]
        - basicAuth: []
          apiKeyHeader: []

      consumes:
        - application/json

      produces:
        - application/json

      parameters:
        - in: body
          name: userProvisionData
          description: data for user provisioning
          required: true
          schema:
            $ref: '#/definitions/requestBodyUserProvision'

      responses:
        200:
          description: success
          schema:
            $ref: '#/definitions/responseBodyTaskResource'
        400:
          description: bad request
          schema:
            $ref: '#/definitions/responseBody400'
        500:
          description: failure
          schema:
            $ref: '#/definitions/responseBody500'

  /users/{id}:
    patch:
      summary: update filer resource for an existing user.
    
      security:
        - oauth2: [filer-gateway]
        - basicAuth: []
          apiKeyHeader: []

      consumes:
        - application/json

      produces:
        - application/json

      parameters:
        - in: path
          name: id
          description: user identifier
          type: string
          required: true

        - in: body
          name: userUpdateData
          description: data for user update 
          required: true
          schema:
            $ref: '#/definitions/requestBodyUserResource'

      responses:
        200:
          description: success
          schema:
            $ref: '#/definitions/responseBodyTaskResource'
        400:
          description: bad request
          schema:
            $ref: '#/definitions/responseBody400'
        404:
          description: user not found
          schema:
            type: string
            enum: [user not found]
        500:
          description: failure
          schema:
            $ref: '#/definitions/responseBody500'
    get:
      summary: get filer resource for an existing user.
    
      consumes:
        - application/json

      produces:
        - application/json

      parameters:
        - in: path
          name: id
          description: user identifier
          type: string
          required: true

      responses:
        200:
          description: success
          schema:
            $ref: '#/definitions/responseBodyUserResource'
        400:
          description: bad request
          schema:
            $ref: '#/definitions/responseBody400'
        404:
          description: user not found
          schema:
            type: string
            enum: [user not found]
        500:
          description: failure
          schema:
            $ref: '#/definitions/responseBody500'

  /projects:
    get:
      summary: get filer resources for all existing project.

      consumes:
        - application/json

      produces:
        - application/json

      responses:
        200:
          description: success
          schema:
            $ref: '#/definitions/responseBodyProjects'
        500:
          description: failure
          schema:
            $ref: '#/definitions/responseBody500'

    post:
      summary: provision filer resource for a new project.

      security:
        - oauth2: [filer-gateway]
        - basicAuth: []
          apiKeyHeader: []

      consumes:
        - application/json

      produces:
        - application/json

      parameters:
        - in: body
          name: projectProvisionData
          description: data for project provisioning
          required: true
          schema:
            $ref: '#/definitions/requestBodyProjectProvision'

      responses:
        200:
          description: success
          schema:
            $ref: '#/definitions/responseBodyTaskResource'
        400:
          description: bad request
          schema:
            $ref: '#/definitions/responseBody400'
        500:
          description: failure
          schema:
            $ref: '#/definitions/responseBody500'

  /projects/{id}:
    patch:
      summary: update filer resource for an existing project.

      security:
        - oauth2: [filer-gateway]
        - basicAuth: []
          apiKeyHeader: []

      consumes:
        - application/json

      produces:
        - application/json

      parameters:
        - in: path
          name: id
          description: project identifier
          type: string
          required: true

        - in: body
          name: projectUpdateData
          description: data for project update 
          required: true
          schema:
            $ref: '#/definitions/requestBodyProjectResource'

      responses:
        200:
          description: success
          schema:
            $ref: '#/definitions/responseBodyTaskResource'
        400:
          description: bad request
          schema:
            $ref: '#/definitions/responseBody400'
        404:
          description: project not found
          schema:
            type: string
            enum: [project not found]
        500:
          description: failure
          schema:
            $ref: '#/definitions/responseBody500'
    get:
      summary: get filer resource for an existing project.
    
      consumes:
        - application/json

      produces:
        - application/json

      parameters:
        - in: path
          name: id
          description: project identifier
          type: string
          required: true

      responses:
        200:
          description: success
          schema:
            $ref: '#/definitions/responseBodyProjectResource'
        400:
          description: bad request
          schema:
            $ref: '#/definitions/responseBody400'
        404:
          description: project not found
          schema:
            type: string
            enum: [project not found]
        500:
          description: failure
          schema:
            $ref: '#/definitions/responseBody500'

  # /projects/{id}/members:
  #   get:
  #     summary: retrieves project members and their filer roles.

  #     produces:
  #       - application/json

  #     parameters:
  #       - in: path
  #         name: id
  #         description: project identifier
  #         type: string
  #         required: true

  #     responses:
  #       200:
  #         description: success
  #         schema:
  #           $ref: '#/definitions/responseBodyProjectMembers'
  #       400:
  #         description: bad request
  #         schema:
  #           $ref: '#/definitions/responseBody400'
  #       404:
  #         description: project not found
  #         schema:
  #           type: string
  #           enum: [project not found]
  #       500:
  #         description: failure
  #         schema:
  #           $ref: '#/definitions/responseBody500'

  # /projects/{id}/storage:
  #   get:
  #     summary: retrieves storage resource information of a project.

  #     produces:
  #       - application/json

  #     parameters:
  #       - in: path
  #         name: id
  #         description: project identifier
  #         type: string
  #         required: true

  #     responses:
  #       200:
  #         description: success
  #         schema:
  #           $ref: '#/definitions/responseBodyProjectStorage'
  #       400:
  #         description: bad request
  #         schema:
  #           $ref: '#/definitions/responseBody400'
  #       404:
  #         description: project not found
  #         schema:
  #           type: string
  #           enum: [project not found]
  #       500:
  #         description: failure
  #         schema:
  #           $ref: '#/definitions/responseBody500'

  /tasks/{type}/{id}:
    get:
      summary: query background task status

      produces:
        - application/json

      parameters:
        - in: path
          name: id
          description: task identifier
          type: string
          required: true
        - in: path
          name: type
          type: string
          description: task type
          required: true

      responses:
        200:
          description: success
          schema:
            $ref: '#/definitions/responseBodyTaskResource'
        400:
          description: bad request
          schema:
            $ref: '#/definitions/responseBody400'
        # 404:
        #   description: task not found
        #   schema:
        #     type: string
        #     enum: [task not found]
        500:
          description: failure
          schema:
            $ref: '#/definitions/responseBody500'

# object definitions
definitions:

  responseBody400:
    description: JSON object containing error message concerning bad client request.
    properties:
      errorMessage:
        description: error message specifying the bad request.
        type: string

  responseBody500:
    description: JSON object containing server side error.
    properties:
      exitCode:
        description: server-side exit code.
        type: integer
      errorMessage:
        description: server-side error message.
        type: string

  responseBodyTaskResource:
    description: JSON object containing scheduled task resource.
    properties:
      taskID:
        $ref: '#/definitions/taskID'
      taskStatus:
        $ref: '#/definitions/taskStatus'
    required:
      - taskID
      - taskStatus

  responseBodyUserResource:
    description: JSON object containing user resources.
    properties:
      userID:
        $ref: '#/definitions/userID'
      memberOf:
        $ref: '#/definitions/memberOf'
      storage:
        $ref: '#/definitions/storageResponse'
    required:
      - userID
      - memberOf
      - storage

  responseBodyProjectResource:
    description: JSON object containing project resources.
    properties:
      projectID:
        $ref: '#/definitions/projectID'
      storage:
        $ref: '#/definitions/storageResponse'
      members:
        $ref: '#/definitions/members'
    required:
      - projectID
      - storage
      - members

  responseBodyProjects:
    description: JSON list containing a list of project resources.
    type: array
    items:
      $ref: '#/definitions/responseBodyProjectResource'

  responseBodyProjectMembers:
    description: JSON object containing current list of members implemented on the filer.
    properties:
      projectID:
        $ref: '#/definitions/projectID'
      members:
        $ref: '#/definitions/members'
    required:
      - projectID
      - members

  responseBodyProjectStorage:
    description: JSON object containing storage resource information of a project.
    properties:
      projectID:
        $ref: '#/definitions/projectID'
      storage:
        $ref: '#/definitions/storageResponse'
    required:
      - projectID
      - storage
     
  requestBodyProjectResource:
    description: JSON object describing resource to be set to the project.
    properties:
      storage:
        $ref: '#/definitions/storageRequest'
      members:
        $ref: '#/definitions/members'
    required:
      - storage
      - members

  requestBodyUserResource:
    description: JSON object describing resource to be set to the user.
    properties:
      storage:
        $ref: '#/definitions/storageRequest'
    required:
      - storage

  requestBodyUserProvision:
    properties:
      userID:
        $ref: '#/definitions/userID'
      storage:
        $ref: '#/definitions/storageRequest'
    required:
      - userID
      - storage

  requestBodyProjectProvision:
    properties:
      projectID:
        $ref: '#/definitions/projectID'
      storage:
        $ref: '#/definitions/storageRequest'
      members:
        $ref: '#/definitions/members'
    required:
      - projectID
      - storage
      - members

  storageResponse:
    description: JSON object for storage resource data.
    properties:
      system:
        description: the targeting filer on which the storage resource is allocated.
        type: string
        enum: [netapp, freenas, cephfs]
      quotaGb:
        description: assigned storage quota in GiB.
        type: integer
      usageMb:
        description: used storage quota in MiB.
        type: integer
    required:
      - system
      - quotaGb
      - usageMb

  storageRequest:
    description: JSON object for storage resource data.
    properties:
      system:
        description: the targeting filer system on which the storage resource is allocated. Use the value "none" to skip the storage resource setting.
        type: string
        enum: [netapp, freenas, cephfs, none]
      quotaGb:
        description: storage quota in GiB.
        type: integer
    required:
      - system
      - quotaGb

  member:
    description: JSON object for a project member.
    properties:
      userID:
        description: userid of the member.
        type: string
      role:
        description: role of the member. Use the value "none" in request data to remove user from the project membership.
        type: string
        enum: [manager, contributor, viewer, traverse, none]
    required:
      - userID
      - role
  
  projectRole:
    description: JSON object for a member role of a project.
    properties:
      projectID:
        description: project identifier
        type: string
      role:
        description: role of the member.
        type: string
        enum: [manager, contributor, viewer, traverse]
    required:
      - projectID
      - role

  memberOf:
    description: a list providing an overview of user's member roles in all active projects.
    type: array
    items:
      $ref: '#/definitions/projectRole'

  members:
    description: a list of project members.
    type: array
    items:
      $ref: '#/definitions/member'

  projectID:
    description: project identifier.
    type: string

  userID:
    description: user identifier.
    type: string

  taskID:
    description: identifier for scheduled background tasks.
    type: string

  taskStatus:
    description: status of the background task.
    properties:
      status:
        description: task status from the last execution.
        type: string
        enum: [waiting, processing, failed, succeeded, canceled]
      error:
        description: task error message from the last execution.
        type: string
      result:
        description: task result from the last execution.
        type: string
    required:
      - status
      - error
      - result

  principle:
    type: string
