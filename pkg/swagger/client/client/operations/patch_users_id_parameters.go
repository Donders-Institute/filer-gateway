// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"

	"github.com/Donders-Institute/filer-gateway/pkg/swagger/client/models"
)

// NewPatchUsersIDParams creates a new PatchUsersIDParams object
// with the default values initialized.
func NewPatchUsersIDParams() *PatchUsersIDParams {
	var ()
	return &PatchUsersIDParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewPatchUsersIDParamsWithTimeout creates a new PatchUsersIDParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewPatchUsersIDParamsWithTimeout(timeout time.Duration) *PatchUsersIDParams {
	var ()
	return &PatchUsersIDParams{

		timeout: timeout,
	}
}

// NewPatchUsersIDParamsWithContext creates a new PatchUsersIDParams object
// with the default values initialized, and the ability to set a context for a request
func NewPatchUsersIDParamsWithContext(ctx context.Context) *PatchUsersIDParams {
	var ()
	return &PatchUsersIDParams{

		Context: ctx,
	}
}

// NewPatchUsersIDParamsWithHTTPClient creates a new PatchUsersIDParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewPatchUsersIDParamsWithHTTPClient(client *http.Client) *PatchUsersIDParams {
	var ()
	return &PatchUsersIDParams{
		HTTPClient: client,
	}
}

/*PatchUsersIDParams contains all the parameters to send to the API endpoint
for the patch users ID operation typically these are written to a http.Request
*/
type PatchUsersIDParams struct {

	/*ID
	  user identifier

	*/
	ID string
	/*UserUpdateData
	  data for user update

	*/
	UserUpdateData *models.RequestBodyUserResource

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the patch users ID params
func (o *PatchUsersIDParams) WithTimeout(timeout time.Duration) *PatchUsersIDParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the patch users ID params
func (o *PatchUsersIDParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the patch users ID params
func (o *PatchUsersIDParams) WithContext(ctx context.Context) *PatchUsersIDParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the patch users ID params
func (o *PatchUsersIDParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the patch users ID params
func (o *PatchUsersIDParams) WithHTTPClient(client *http.Client) *PatchUsersIDParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the patch users ID params
func (o *PatchUsersIDParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithID adds the id to the patch users ID params
func (o *PatchUsersIDParams) WithID(id string) *PatchUsersIDParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the patch users ID params
func (o *PatchUsersIDParams) SetID(id string) {
	o.ID = id
}

// WithUserUpdateData adds the userUpdateData to the patch users ID params
func (o *PatchUsersIDParams) WithUserUpdateData(userUpdateData *models.RequestBodyUserResource) *PatchUsersIDParams {
	o.SetUserUpdateData(userUpdateData)
	return o
}

// SetUserUpdateData adds the userUpdateData to the patch users ID params
func (o *PatchUsersIDParams) SetUserUpdateData(userUpdateData *models.RequestBodyUserResource) {
	o.UserUpdateData = userUpdateData
}

// WriteToRequest writes these params to a swagger request
func (o *PatchUsersIDParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param id
	if err := r.SetPathParam("id", o.ID); err != nil {
		return err
	}

	if o.UserUpdateData != nil {
		if err := r.SetBodyParam(o.UserUpdateData); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
